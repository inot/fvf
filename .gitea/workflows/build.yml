name: CI - Echo Build Message

on:
  push:
    branches:
      - 'feature/*'
  pull_request:

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    container:
      image: golang:latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y unzip zip ca-certificates curl git nodejs npm  # node needed for upload-artifact

      - name: Checkout
        uses: actions/checkout@v3

      - name: Unpack source
        run: |
          tar -xzf /tmp/src.tgz -C .
          rm -f /tmp/src.tgz

      - name: Show Go version
        run: go version

      - name: Run tests
        run: go test ./...

      - name: Run coverage
        run: go test ./... -coverprofile cover.out.tmp && cat cover.out.tmp | grep -v "ui.go" > cover.out && go tool cover -func cover.out | fgrep total | awk '{print $3}'

      - name: Build all platforms
        run: make build-all

      - name: Determine version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          if [ -f version ] && [ -s version ]; then
            VERSION=$(sed -e 's/[[:space:]]//g' -e 's/[.]*$//' version)
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo 0.1.0)
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Package artifacts
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ steps.ver.outputs.version }}"
          APP=fvf
          DIST=dist
          mkdir -p "$DIST"

          package() {
            bin_path="$1"; plat_tag="$2"; rename_to="$3"
            tmpdir=$(mktemp -d)
            cp README.md "$tmpdir/README.md" 2>/dev/null || true
            cp "$bin_path" "$tmpdir/$rename_to"
            chmod +x "$tmpdir/$rename_to" || true
            (cd "$tmpdir" && zip -9 -r "../${APP}-v${VERSION}-${plat_tag}.zip" .)
            mv "${tmpdir}/../${APP}-v${VERSION}-${plat_tag}.zip" "$DIST/"
            rm -rf "$tmpdir"
          }

          [ -f "$DIST/${APP}-linux-amd64" ] && package "$DIST/${APP}-linux-amd64" linux-amd64 "$APP"
          [ -f "$DIST/${APP}-linux-arm64" ] && package "$DIST/${APP}-linux-arm64" linux-arm64 "$APP"
          [ -f "$DIST/${APP}-darwin-arm64" ] && package "$DIST/${APP}-darwin-arm64" macos-arm64 "$APP"
          [ -f "$DIST/${APP}-windows-amd64.exe" ] && package "$DIST/${APP}-windows-amd64.exe" win64 "${APP}.exe"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fvf-zips
          path: dist/*.zip

  release:
    runs-on: ubuntu-latest
    needs: build-and-package
    container:
      image: node:16-bullseye
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: fvf-zips
          path: dist

      - name: Create Gitea Release and upload assets
        uses: https://gitea.com/actions/gitea-release-action@v1
        env:
          NODE_OPTIONS: '--experimental-fetch'
        with:
          server_url: ${{ secrets.GITEASERVERURL }}
          token: ${{ secrets.GITEATOKEN }}
          tag_name: v${{ needs.build-and-package.outputs.version }}
          name: "fvf v${{ needs.build-and-package.outputs.version }}"
          body: |
            Automated release from CI
          files: |
            dist/*.zip