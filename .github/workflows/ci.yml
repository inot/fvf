name: CI - Echo Build Message

on:
  push:
    branches:
      - "**"
    # paths:
    #   - "**.go"
  pull_request:

permissions:
  contents: write # needed to create releases

jobs:
  build-and-package:
    runs-on: self-hosted
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch tags for git describe

      - name: Show Go version
        run: go version

      - name: Install zip/unzip (if missing)
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip

      - name: Run tests
        run: go test ./...

      - name: Run coverage
        run: go test ./... -coverprofile cover.out.tmp && cat cover.out.tmp | grep -v "ui.go" > cover.out && go tool cover -func cover.out | fgrep total | awk '{print $3}'

      - name: Build all platforms
        run: make build-all

      - name: Determine version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          if [ -f version ] && [ -s version ]; then
            VERSION=$(sed -e 's/[[:space:]]//g' -e 's/[.]*$//' version)
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo 0.1.0)
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Package artifacts
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ steps.ver.outputs.version }}"
          APP=fvf
          DIST=dist
          mkdir -p "$DIST"

          package() {
            bin_path="$1"; plat_tag="$2"; rename_to="$3"
            tmpdir=$(mktemp -d)
            cp README.md "$tmpdir/README.md" 2>/dev/null || true
            cp "$bin_path" "$tmpdir/$rename_to"
            chmod +x "$tmpdir/$rename_to" || true
            (cd "$tmpdir" && zip -9 -r "../${APP}-v${VERSION}-${plat_tag}.zip" .)
            mv "${tmpdir}/../${APP}-v${VERSION}-${plat_tag}.zip" "$DIST/"
            rm -rf "$tmpdir"
          }

          [ -f "$DIST/${APP}-linux-amd64" ] && package "$DIST/${APP}-linux-amd64" linux-amd64 "$APP"
          [ -f "$DIST/${APP}-linux-arm64" ] && package "$DIST/${APP}-linux-arm64" linux-arm64 "$APP"
          [ -f "$DIST/${APP}-darwin-arm64" ] && package "$DIST/${APP}-darwin-arm64" macos-arm64 "$APP"
          [ -f "$DIST/${APP}-windows-amd64.exe" ] && package "$DIST/${APP}-windows-amd64.exe" win64 "${APP}.exe"

      - name: Create GitHub Release and upload assets
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: "fvf v${{ steps.ver.outputs.version }}"
          body: |
            Automated release from CI
          files: |
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
